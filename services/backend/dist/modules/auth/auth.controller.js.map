{"version":3,"sources":["../../../src/modules/auth/auth.controller.ts"],"sourcesContent":["import {\n\tBadRequestException,\n\tBody,\n\tController,\n\tGet,\n\tHttpCode,\n\tHttpStatus,\n\tPost,\n\tQuery,\n\tReq,\n\tRes,\n\tUseGuards,\n} from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { Response } from 'express'\nimport { AuthProviderEnum, AuthStrategyEnum } from '../../utils/auth.enum'\nimport { AuthService } from './auth.service'\n\n@Controller({\n\tpath: 'auth',\n\tversion: '1',\n})\nexport class AuthController {\n\tconstructor(private authService: AuthService) {}\n\n\t@Post('signin/provider/google')\n\t@UseGuards(AuthGuard(AuthStrategyEnum.googleOAuth))\n\tasync signinGoogle(@Req() { user }) {\n\t\treturn this.authService.signinOAuth({\n\t\t\temail: user.email,\n\t\t\tsignProviders: [AuthProviderEnum.GOOGLE],\n\t\t})\n\t}\n\n\t@Post('signin/provider/email')\n\t@HttpCode(HttpStatus.OK)\n\tasync signinEmail(@Body() { email, password }, @Res() res: Response) {\n\t\tconst tokens = await this.authService.signinAuth({\n\t\t\temail,\n\t\t\tpassword,\n\t\t})\n\t\treturn res\n\t\t\t.cookie('access_token', tokens.accessToken)\n\t\t\t.cookie('refresh_token', tokens.refreshToken)\n\t\t\t.send()\n\t}\n\n\t@Post('signup/provider/email')\n\tasync signupEmail(@Body() user) {\n\t\treturn this.authService.signup(user)\n\t}\n\n\t@Get('verify/provider/email')\n\tasync verifyEmail(@Query('verifyEmailToken') verifyEmailToken) {\n\t\treturn this.authService.verifyEmailToken(verifyEmailToken)\n\t}\n\n\t@Post('reset-password')\n\t@UseGuards(AuthGuard(AuthStrategyEnum.jwtAuth))\n\tasync resetPassword(@Req() { user }, @Body() { password, resetPassword }) {\n\t\tif (\n\t\t\t!(await this.authService.verifyPassword({\n\t\t\t\temail: user.email,\n\t\t\t\tpassword,\n\t\t\t}))\n\t\t)\n\t\t\tthrow new BadRequestException('Invalid password')\n\t\treturn this.authService.update({\n\t\t\temail: user.email,\n\t\t\tpassword: resetPassword,\n\t\t})\n\t}\n\n\t@Get('refresh')\n\t@UseGuards(AuthGuard(AuthStrategyEnum.jwtAuth))\n\tasync refresh(@Req() req) {\n\t\tconst cookies = req.headers.cookie.split(';')\n\t\tlet refreshToken = ''\n\n\t\tfor (let cookie of cookies) {\n\t\t\tcookie = cookie.trim()\n\t\t\tif (cookie.startsWith('refresh_token=')) {\n\t\t\t\trefreshToken = cookie.split('=')[1]\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\treturn { refreshEmailToken: refreshToken }\n\t}\n\n\t@Get('me')\n\t@UseGuards(AuthGuard(AuthStrategyEnum.jwtAuth))\n\tasync me(@Req() { user }) {\n\t\treturn user\n\t}\n}\n"],"names":["AuthController","signinGoogle","user","authService","signinOAuth","email","signProviders","AuthProviderEnum","GOOGLE","signinEmail","password","res","tokens","signinAuth","cookie","accessToken","refreshToken","send","signupEmail","signup","verifyEmail","verifyEmailToken","resetPassword","verifyPassword","BadRequestException","update","refresh","req","cookies","headers","split","trim","startsWith","refreshEmailToken","me","constructor","Post","UseGuards","AuthGuard","AuthStrategyEnum","googleOAuth","Req","HttpCode","HttpStatus","OK","Body","Res","Get","Query","jwtAuth","Controller","path","version"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}