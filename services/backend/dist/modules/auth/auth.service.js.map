{"version":3,"sources":["../../../src/modules/auth/auth.service.ts"],"sourcesContent":["import {\n\tBadRequestException,\n\tInjectable,\n\tUnauthorizedException,\n} from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\nimport * as bcrypt from 'bcrypt'\nimport { AuthProviderEnum, AuthStatusEnum } from '../../utils/auth.enum'\nimport { PrismaService } from '../database/prisma.service'\n\n@Injectable()\nexport class AuthService {\n\tconstructor(\n\t\tprotected readonly jwtService: JwtService,\n\t\tprotected readonly prismaService: PrismaService\n\t) {}\n\n\tprivate jwtOptions = {\n\t\taccess: {\n\t\t\tsecret: process.env.JWT_SECRET_KEY,\n\t\t\texpiresIn: process.env.JWT_EXPIRATION_TIME,\n\t\t},\n\t\trefresh: {\n\t\t\tsecret: process.env.JWT_REFRESH_SECRET_KEY,\n\t\t\texpiresIn: process.env.JWT_REFRESH_EXPIRATION_TIME,\n\t\t},\n\t}\n\n\tasync signinAuth({ email, password }) {\n\t\ttry {\n\t\t\tconst userExists = await this.prismaService.user.findFirstOrThrow({\n\t\t\t\twhere: { email },\n\t\t\t})\n\t\t\tif (userExists.signStatus !== AuthStatusEnum.ACTIVE)\n\t\t\t\tthrow new UnauthorizedException('User is not active')\n\t\t\tif (!(await this.verifyPassword({ email, password })))\n\t\t\t\tthrow new UnauthorizedException('Invalid password')\n\t\t\treturn this.signTokens(userExists)\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(error.message)\n\t\t}\n\t}\n\n\tasync signinOAuth(user) {\n\t\tlet currentUser = await this.prismaService.user.upsert({\n\t\t\twhere: { email: user.email },\n\t\t\tcreate: {\n\t\t\t\t...user,\n\t\t\t\tsignStatus: AuthStatusEnum.ACTIVE,\n\t\t\t\tpassword: null,\n\t\t\t},\n\t\t\tupdate: {},\n\t\t})\n\n\t\tuser.signProviders.forEach(provider => {\n\t\t\tif (!currentUser.signProviders.includes(provider)) {\n\t\t\t\tcurrentUser.signProviders.push(provider)\n\t\t\t}\n\t\t})\n\n\t\tconst { accessToken, refreshToken } = await this.signTokens(currentUser)\n\n\t\tcurrentUser.refreshJwtToken = await bcrypt.hash(refreshToken, 10)\n\t\tawait this.prismaService.user.update({\n\t\t\twhere: { email: currentUser.email },\n\t\t\tdata: currentUser,\n\t\t})\n\n\t\treturn { accessToken, refreshToken }\n\t}\n\n\tasync update(user) {\n\t\tconst currentUser = await this.prismaService.user.findFirstOrThrow({\n\t\t\twhere: { email: user.email },\n\t\t})\n\n\t\tObject.assign(currentUser, user)\n\n\t\tif (user.password) {\n\t\t\tcurrentUser.password = await bcrypt.hash(user.password, 10)\n\t\t\tif (!currentUser.signProviders.includes(AuthProviderEnum.EMAIL))\n\t\t\t\tcurrentUser.signProviders.push(AuthProviderEnum.EMAIL)\n\t\t}\n\n\t\treturn this.prismaService.user.update({\n\t\t\twhere: { email: currentUser.email },\n\t\t\tdata: currentUser,\n\t\t})\n\t}\n\n\tasync signTokens(user) {\n\t\tconst [accessToken, refreshToken] = await Promise.all([\n\t\t\tthis.jwtService.signAsync({ user }, this.jwtOptions.access),\n\t\t\tthis.jwtService.signAsync({ user }, this.jwtOptions.refresh),\n\t\t])\n\n\t\treturn {\n\t\t\taccessToken,\n\t\t\trefreshToken,\n\t\t}\n\t}\n\n\tasync verifyAccessToken(token) {\n\t\treturn this.jwtService.verify(token, this.jwtOptions.access)\n\t}\n\n\tasync verifyRefresshToken(token) {\n\t\treturn this.jwtService.verify(token, this.jwtOptions.refresh)\n\t}\n\n\tasync verifyPassword({ email, password }) {\n\t\ttry {\n\t\t\tconst currentUser = await this.prismaService.user.findFirstOrThrow({\n\t\t\t\twhere: { email },\n\t\t\t})\n\t\t\treturn !!(await bcrypt.compare(password, currentUser.password))\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(error.message)\n\t\t}\n\t}\n\n\tasync verifyEmailToken(verifyEmailToken) {\n\t\ttry {\n\t\t\tconst currentUser = await this.prismaService.user.findFirstOrThrow({\n\t\t\t\twhere: { verifyEmailToken },\n\t\t\t})\n\t\t\tcurrentUser.verifyEmailToken = null\n\t\t\tcurrentUser.signStatus = AuthStatusEnum.ACTIVE\n\t\t\treturn !!(await this.prismaService.user.update({\n\t\t\t\twhere: { email: currentUser.email },\n\t\t\t\tdata: currentUser,\n\t\t\t}))\n\t\t} catch (error) {\n\t\t\tthrow new BadRequestException(error.message)\n\t\t}\n\t}\n\n\tasync signup(user) {\n\t\tconst userExists = await this.prismaService.user.findFirst({\n\t\t\twhere: { email: user.email },\n\t\t})\n\t\tif (userExists) throw new BadRequestException('User already exists')\n\t\tuser.password = user.password\n\t\t\t? await bcrypt.hash(user.password, 10)\n\t\t\t: null\n\t\tuser.signStatus = AuthStatusEnum.PENDING\n\t\tuser.signProviders = [AuthProviderEnum.EMAIL]\n\t\tuser.verifyEmailToken = await bcrypt.hash(user.email, 10)\n\t\treturn this.prismaService.user.create({\n\t\t\tdata: user,\n\t\t})\n\t}\n}\n"],"names":["AuthService","signinAuth","email","password","userExists","prismaService","user","findFirstOrThrow","where","signStatus","AuthStatusEnum","ACTIVE","UnauthorizedException","verifyPassword","signTokens","error","message","signinOAuth","currentUser","upsert","create","update","signProviders","forEach","provider","includes","push","accessToken","refreshToken","refreshJwtToken","bcrypt","hash","data","Object","assign","AuthProviderEnum","EMAIL","Promise","all","jwtService","signAsync","jwtOptions","access","refresh","verifyAccessToken","token","verify","verifyRefresshToken","compare","verifyEmailToken","BadRequestException","signup","findFirst","PENDING","constructor","secret","process","env","JWT_SECRET_KEY","expiresIn","JWT_EXPIRATION_TIME","JWT_REFRESH_SECRET_KEY","JWT_REFRESH_EXPIRATION_TIME","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}